#----------------------------------------------------------------
# Use the latest 2.1 version of CircleCI pipeline process engine.
#----------------------------------------------------------------
version: 2.1

#----------------------------------------------------------------
# Commands
#----------------------------------------------------------------

commands:
  cmd_build-frontend:
    description: Build frontend commands
    steps:
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            sudo npm install typescript -g
  cmd_build-backend:
    description: Build backend commands
    steps:
      - run:
          name: Build backend-end
          command: |
            cd backend
            sudo npm install typescript -g
            sudo npm install
            sudo npm run build
  cmd_test-frontend:
    description: test frontend commands
    steps:
      - run:
          name: test front-end
          command: |
            cd frontend
            sudo npm install
            sudo npm test
  cmd_test-backend:
    description: test backend commands
    steps:
      - run:
          name: test back-end
          command: |
            cd backend
            sudo npm install
            sudo npm test --updateSnapshot
  cmd_scan-frontend:
    description: scan frontend commands
    steps:
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install --save
            exit 0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  cmd_scan-backend:
    description: scan backend commands
    steps:
      - run:
          name: scan back-end
          command: |
            cd backend
            sudo npm install
            sudo npm audit fix --audit-level=critical --force
            sudo npm audit fix --audit-level=critical --force
            sudo npm audit --audit-level=critical
  cmd_check-backend-infra:
    description: Ensure back-end infrastructure exists
    steps:
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  cmd_check-frontend-infra:
    description: Ensure front-end infrastructure exists
    steps:
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  cmd_add-backend-inventory:
    description: Add back-end ip to ansible inventory
    steps:
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
  cmd_configure-infra-dep:
    description: Install dependencies of configure infra
    steps:
      - run:
          name: Install dependencies of configure infra
          command: |
            sudo -E apt-add-repository ppa:ansible/ansible
            sudo apt update
            sudo apt install ansible
  cmd_configure-server:
    description: Configure server
    steps:
      - run:
          name: Configure server
          working_directory: .circleci/ansible/
          command: |
            echo "[web]" > inventory.txt
            BACKEND_PUBLIC_IF=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IF >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
  cmd_prepare-nodejs:
    description: Install AWS CLI v2 using cURL
    steps:
      - run:
          name: Install aws cli v2
          command: |
            cd backend
            sudo npm cache clean --force
            sudo rm -rf node_modules
            sudo npm install
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              curl --insecure https://kvdb.io/YHfkL8imZwJhHwV2UGVznq/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
              echo "Can not add to kvdb"
  cmd_get-backend-url:
    description: Get Backend URL
    steps:
      - run:
          name: Get Backend URL
          command: |
            cd frontend
            API_URL=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${API_URL}:3030" > ".env"
            echo "ENVIRONMENT=production" >> ".env"
            echo "NODE_ENV=production" >> ".env"
            cat .env
            npm install
            sudo npm install typescript -g
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
  cmd_deploy-backend-dep:
    description: Backend dependencies
    steps:
      - run:
          name: Backend dependencies
          command: |
            cd backend
            npm install
  cmd_deploy-backend-packages:
    description: Backend packages
    steps:
      - run:
          name: Backend packages
          command: |
            cd backend
            sudo npm install typescript -g
            npm install
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            sudo cp backend/artifact.tar.gz /home/
  cmd_deploy-backend:
    description: Deploy backend
    steps:
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible/
            echo "[web]" > inventory.txt
            BACKEND_PUBLIC_IF=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IF >> inventory.txt
            cat inventory.txt
            sudo sed -i 's/host_key_checking = True/host_key_checking = False/g' /etc/ansible/ansible.cfg
            sudo sed -i 's/host_key_checking=True/host_key_checking = False/g' /etc/ansible/ansible.cfg
            ANSIBLE_HOST_KEY_CHECKING=False
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml
  cmd_smoke-backend:
    description: Backend smoke test
    steps:
      - run:
          name: Backend smoke test
          command: |
            BACKEND_PUBLIC_IF=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            if curl -s http://${BACKEND_PUBLIC_IF}:3030/api/status | grep -i "ok"
            then
              echo "Backend Success, but this is intentional error :)"
              exit 0
            else
              echo "Backend Fail!"
              exit 1
            fi
  cmd_smoke-frontend:
    description: Frontend smoke test
    steps:
      - run:
          name: Frontend smoke test
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
            if curl -s $FRONTEND_URL | grep -i "Welcome"
            then
              echo "Frontend Success!"
              exit 1
            else
              echo "Frontend Fail!"
              - revert-migrations

              exit 1
            fi
  cmd_awscli:
    description: Install AWS CLI v2 using cURL
    steps:
      - run:
          name: Install aws cli v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  cmd_ansible:
    description: Install Ansible v2
    steps:
      - run:
          name: Install Ansible v2
          command: |
            sudo apt update
            sudo apt install --yes software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible --yes
  cmd_nodejs:
    description: Install nodejs
    steps:
      - run:
          name: Install nodejs
          command: |
            sudo apt update
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g n
            sudo n 13.8.0
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Echo workflow ID that is going be be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy backend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflowID >> --force
      - run:
          name: Destroy frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl https://kvdb.io/YHfkL8imZwJhHwV2UGVznq/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  export-workflow:
    description: Export old workflow
    steps:
      - run:
          name: Export old workflow
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID"
            curl --insecure https://kvdb.io/YHfkL8imZwJhHwV2UGVznq/old_wf -d "${OLD_WORKFLOW_ID}"
  cloudfront-workflow:
    description: Cloudfront workflow
    steps:
      - run:
          name: Cloudfront workflow
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-deply-amira
  cleanup-workflow:
    description: CGet old stack workflow id & cleanup
    steps:
      - run:
          name: Get old stack workflow id & cleanup
          command: |
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "Stacks before clean-up:"
            echo "${STACKS[@]}"
            export OLD_WF=$(curl --insecure https://kvdb.io/YHfkL8imZwJhHwV2UGVznq/old_wf)
            echo "Old Wrokflow ID:"
            echo "${OLD_WF}"
                        
            if [ "${CIRCLE_WORKFLOW_ID:0:7}" == "${OLD_WF}" ];then
              echo "Nothing to remove"
            else
              echo "Removing previous stacks/s3 ..."
              aws s3 rm "s3://udapeople-${OLD_WF}" --recursive || echo "No S3 Bucket with that name ..."
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WF}" || echo "No stack with that name ..."
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WF}" || echo "No stack with that name ..."
            fi
            echo "Stacks after clean-up:"
            echo "${STACKS[@]}"


#----------------------------------------------------------------
# Orbs
#----------------------------------------------------------------
orbs:
  slack: circleci/slack@4.10.1

#----------------------------------------------------------------
# Jobs
#---------------------------------------------------------------- 
            
jobs:

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - cmd_build-frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout    
      - restore_cache:
          keys: [backend-deps]
      - cmd_build-backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - cmd_test-frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - cmd_test-backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - cmd_scan-frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - cmd_scan-backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - cmd_awscli
      - cmd_check-backend-infra
      - cmd_check-frontend-infra
      - cmd_add-backend-inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - cmd_awscli
      - add_ssh_keys:
          fingerprints: ["27:4e:39:ad:07:93:4a:f8:f0:94:66:ec:fd:8d:46:9f"]
      - attach_workspace:
          at: /tmp/workspace
      - cmd_configure-infra-dep
      - cmd_configure-server
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - cmd_awscli
      - attach_workspace:
            at: ~/
      - cmd_prepare-nodejs
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - cmd_awscli
      - cmd_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - cmd_get-backend-url
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment
                    
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - cmd_awscli
      - cmd_nodejs
      - cmd_ansible
      - add_ssh_keys:
          fingerprints: ["27:4e:39:ad:07:93:4a:f8:f0:94:66:ec:fd:8d:46:9f"]
      - cmd_deploy-backend-dep
      - cmd_deploy-backend-packages
      - cmd_deploy-backend
      - destroy-environment

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - cmd_awscli
      - cmd_nodejs
      - cmd_ansible
      - cmd_smoke-backend
      - cmd_smoke-frontend
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - cmd_awscli
      - cmd_nodejs
      - cmd_ansible
      - export-workflow
      - cloudfront-workflow
      - destroy-environment

  cleanup:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - cmd_awscli
      - cleanup-workflow
      - destroy-environment

#----------------------------------------------------------------
# Workflows
#---------------------------------------------------------------- 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify:
          context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]